<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: zitadel/resources/action/v3alpha/target.proto

namespace Zitadel\Resources\Action\V3alpha;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Wait for response but response body is ignored, status is checked, call is sent as post.
 *
 * Generated from protobuf message <code>zitadel.resources.action.v3alpha.SetRESTWebhook</code>
 */
class SetRESTWebhook extends \Google\Protobuf\Internal\Message
{
    /**
     * Define if any error stops the whole execution. By default the process continues as normal.
     *
     * Generated from protobuf field <code>bool interrupt_on_error = 1 [json_name = "interruptOnError"];</code>
     */
    protected $interrupt_on_error = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $interrupt_on_error
     *           Define if any error stops the whole execution. By default the process continues as normal.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Zitadel\Resources\Action\V3Alpha\Target::initOnce();
        parent::__construct($data);
    }

    /**
     * Define if any error stops the whole execution. By default the process continues as normal.
     *
     * Generated from protobuf field <code>bool interrupt_on_error = 1 [json_name = "interruptOnError"];</code>
     * @return bool
     */
    public function getInterruptOnError()
    {
        return $this->interrupt_on_error;
    }

    /**
     * Define if any error stops the whole execution. By default the process continues as normal.
     *
     * Generated from protobuf field <code>bool interrupt_on_error = 1 [json_name = "interruptOnError"];</code>
     * @param bool $var
     * @return $this
     */
    public function setInterruptOnError($var)
    {
        GPBUtil::checkBool($var);
        $this->interrupt_on_error = $var;

        return $this;
    }

}

