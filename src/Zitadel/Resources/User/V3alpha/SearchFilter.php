<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: zitadel/resources/user/v3alpha/query.proto

namespace Zitadel\Resources\User\V3alpha;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>zitadel.resources.user.v3alpha.SearchFilter</code>
 */
class SearchFilter extends \Google\Protobuf\Internal\Message
{
    protected $Filter;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Zitadel\Resources\User\V3alpha\OrFilter $or_filter
     *           Union the results of each sub filter ('OR').
     *     @type \Zitadel\Resources\User\V3alpha\AndFilter $and_filter
     *           Limit the result to match all sub queries ('AND').
     *           Note that if you specify multiple queries, they will be implicitly used as andQueries.
     *           Use the andFilter in combination with orFilter and notFilter.
     *     @type \Zitadel\Resources\User\V3alpha\NotFilter $not_filter
     *           Exclude / Negate the result of the sub query ('NOT').
     *     @type \Zitadel\Resources\User\V3alpha\UserIDFilter $user_id_filter
     *           Limit the result to a specific user ID.
     *     @type \Zitadel\Resources\User\V3alpha\OrganizationIDFilter $organization_id_filter
     *           Limit the result to a specific organization.
     *     @type \Zitadel\Resources\User\V3alpha\UsernameFilter $username_filter
     *           Limit the result to a specific username.
     *     @type \Zitadel\Resources\User\V3alpha\EmailFilter $email_filter
     *           Limit the result to a specific contact email.
     *     @type \Zitadel\Resources\User\V3alpha\PhoneFilter $phone_filter
     *           Limit the result to a specific contact phone.
     *     @type \Zitadel\Resources\User\V3alpha\StateFilter $state_filter
     *           Limit the result to a specific state of the user.
     *     @type \Zitadel\Resources\User\V3alpha\SchemaIDFilter $schema_id_filter
     *           Limit the result to a specific schema ID.
     *     @type \Zitadel\Resources\User\V3alpha\SchemaTypeFilter $schema_type_filter
     *           Limit the result to a specific schema type.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Zitadel\Resources\User\V3Alpha\Query::initOnce();
        parent::__construct($data);
    }

    /**
     * Union the results of each sub filter ('OR').
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.OrFilter or_filter = 1 [json_name = "orFilter"];</code>
     * @return \Zitadel\Resources\User\V3alpha\OrFilter|null
     */
    public function getOrFilter()
    {
        return $this->readOneof(1);
    }

    public function hasOrFilter()
    {
        return $this->hasOneof(1);
    }

    /**
     * Union the results of each sub filter ('OR').
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.OrFilter or_filter = 1 [json_name = "orFilter"];</code>
     * @param \Zitadel\Resources\User\V3alpha\OrFilter $var
     * @return $this
     */
    public function setOrFilter($var)
    {
        GPBUtil::checkMessage($var, \Zitadel\Resources\User\V3alpha\OrFilter::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Limit the result to match all sub queries ('AND').
     * Note that if you specify multiple queries, they will be implicitly used as andQueries.
     * Use the andFilter in combination with orFilter and notFilter.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.AndFilter and_filter = 2 [json_name = "andFilter"];</code>
     * @return \Zitadel\Resources\User\V3alpha\AndFilter|null
     */
    public function getAndFilter()
    {
        return $this->readOneof(2);
    }

    public function hasAndFilter()
    {
        return $this->hasOneof(2);
    }

    /**
     * Limit the result to match all sub queries ('AND').
     * Note that if you specify multiple queries, they will be implicitly used as andQueries.
     * Use the andFilter in combination with orFilter and notFilter.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.AndFilter and_filter = 2 [json_name = "andFilter"];</code>
     * @param \Zitadel\Resources\User\V3alpha\AndFilter $var
     * @return $this
     */
    public function setAndFilter($var)
    {
        GPBUtil::checkMessage($var, \Zitadel\Resources\User\V3alpha\AndFilter::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Exclude / Negate the result of the sub query ('NOT').
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.NotFilter not_filter = 3 [json_name = "notFilter"];</code>
     * @return \Zitadel\Resources\User\V3alpha\NotFilter|null
     */
    public function getNotFilter()
    {
        return $this->readOneof(3);
    }

    public function hasNotFilter()
    {
        return $this->hasOneof(3);
    }

    /**
     * Exclude / Negate the result of the sub query ('NOT').
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.NotFilter not_filter = 3 [json_name = "notFilter"];</code>
     * @param \Zitadel\Resources\User\V3alpha\NotFilter $var
     * @return $this
     */
    public function setNotFilter($var)
    {
        GPBUtil::checkMessage($var, \Zitadel\Resources\User\V3alpha\NotFilter::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Limit the result to a specific user ID.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.UserIDFilter user_id_filter = 4 [json_name = "userIdFilter"];</code>
     * @return \Zitadel\Resources\User\V3alpha\UserIDFilter|null
     */
    public function getUserIdFilter()
    {
        return $this->readOneof(4);
    }

    public function hasUserIdFilter()
    {
        return $this->hasOneof(4);
    }

    /**
     * Limit the result to a specific user ID.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.UserIDFilter user_id_filter = 4 [json_name = "userIdFilter"];</code>
     * @param \Zitadel\Resources\User\V3alpha\UserIDFilter $var
     * @return $this
     */
    public function setUserIdFilter($var)
    {
        GPBUtil::checkMessage($var, \Zitadel\Resources\User\V3alpha\UserIDFilter::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Limit the result to a specific organization.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.OrganizationIDFilter organization_id_filter = 5 [json_name = "organizationIdFilter"];</code>
     * @return \Zitadel\Resources\User\V3alpha\OrganizationIDFilter|null
     */
    public function getOrganizationIdFilter()
    {
        return $this->readOneof(5);
    }

    public function hasOrganizationIdFilter()
    {
        return $this->hasOneof(5);
    }

    /**
     * Limit the result to a specific organization.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.OrganizationIDFilter organization_id_filter = 5 [json_name = "organizationIdFilter"];</code>
     * @param \Zitadel\Resources\User\V3alpha\OrganizationIDFilter $var
     * @return $this
     */
    public function setOrganizationIdFilter($var)
    {
        GPBUtil::checkMessage($var, \Zitadel\Resources\User\V3alpha\OrganizationIDFilter::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Limit the result to a specific username.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.UsernameFilter username_filter = 6 [json_name = "usernameFilter"];</code>
     * @return \Zitadel\Resources\User\V3alpha\UsernameFilter|null
     */
    public function getUsernameFilter()
    {
        return $this->readOneof(6);
    }

    public function hasUsernameFilter()
    {
        return $this->hasOneof(6);
    }

    /**
     * Limit the result to a specific username.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.UsernameFilter username_filter = 6 [json_name = "usernameFilter"];</code>
     * @param \Zitadel\Resources\User\V3alpha\UsernameFilter $var
     * @return $this
     */
    public function setUsernameFilter($var)
    {
        GPBUtil::checkMessage($var, \Zitadel\Resources\User\V3alpha\UsernameFilter::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Limit the result to a specific contact email.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.EmailFilter email_filter = 7 [json_name = "emailFilter"];</code>
     * @return \Zitadel\Resources\User\V3alpha\EmailFilter|null
     */
    public function getEmailFilter()
    {
        return $this->readOneof(7);
    }

    public function hasEmailFilter()
    {
        return $this->hasOneof(7);
    }

    /**
     * Limit the result to a specific contact email.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.EmailFilter email_filter = 7 [json_name = "emailFilter"];</code>
     * @param \Zitadel\Resources\User\V3alpha\EmailFilter $var
     * @return $this
     */
    public function setEmailFilter($var)
    {
        GPBUtil::checkMessage($var, \Zitadel\Resources\User\V3alpha\EmailFilter::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Limit the result to a specific contact phone.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.PhoneFilter phone_filter = 8 [json_name = "phoneFilter"];</code>
     * @return \Zitadel\Resources\User\V3alpha\PhoneFilter|null
     */
    public function getPhoneFilter()
    {
        return $this->readOneof(8);
    }

    public function hasPhoneFilter()
    {
        return $this->hasOneof(8);
    }

    /**
     * Limit the result to a specific contact phone.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.PhoneFilter phone_filter = 8 [json_name = "phoneFilter"];</code>
     * @param \Zitadel\Resources\User\V3alpha\PhoneFilter $var
     * @return $this
     */
    public function setPhoneFilter($var)
    {
        GPBUtil::checkMessage($var, \Zitadel\Resources\User\V3alpha\PhoneFilter::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Limit the result to a specific state of the user.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.StateFilter state_filter = 9 [json_name = "stateFilter"];</code>
     * @return \Zitadel\Resources\User\V3alpha\StateFilter|null
     */
    public function getStateFilter()
    {
        return $this->readOneof(9);
    }

    public function hasStateFilter()
    {
        return $this->hasOneof(9);
    }

    /**
     * Limit the result to a specific state of the user.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.StateFilter state_filter = 9 [json_name = "stateFilter"];</code>
     * @param \Zitadel\Resources\User\V3alpha\StateFilter $var
     * @return $this
     */
    public function setStateFilter($var)
    {
        GPBUtil::checkMessage($var, \Zitadel\Resources\User\V3alpha\StateFilter::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * Limit the result to a specific schema ID.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.SchemaIDFilter schema_id_filter = 10 [json_name = "schemaIdFilter"];</code>
     * @return \Zitadel\Resources\User\V3alpha\SchemaIDFilter|null
     */
    public function getSchemaIdFilter()
    {
        return $this->readOneof(10);
    }

    public function hasSchemaIdFilter()
    {
        return $this->hasOneof(10);
    }

    /**
     * Limit the result to a specific schema ID.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.SchemaIDFilter schema_id_filter = 10 [json_name = "schemaIdFilter"];</code>
     * @param \Zitadel\Resources\User\V3alpha\SchemaIDFilter $var
     * @return $this
     */
    public function setSchemaIdFilter($var)
    {
        GPBUtil::checkMessage($var, \Zitadel\Resources\User\V3alpha\SchemaIDFilter::class);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     * Limit the result to a specific schema type.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.SchemaTypeFilter schema_type_filter = 11 [json_name = "schemaTypeFilter"];</code>
     * @return \Zitadel\Resources\User\V3alpha\SchemaTypeFilter|null
     */
    public function getSchemaTypeFilter()
    {
        return $this->readOneof(11);
    }

    public function hasSchemaTypeFilter()
    {
        return $this->hasOneof(11);
    }

    /**
     * Limit the result to a specific schema type.
     *
     * Generated from protobuf field <code>.zitadel.resources.user.v3alpha.SchemaTypeFilter schema_type_filter = 11 [json_name = "schemaTypeFilter"];</code>
     * @param \Zitadel\Resources\User\V3alpha\SchemaTypeFilter $var
     * @return $this
     */
    public function setSchemaTypeFilter($var)
    {
        GPBUtil::checkMessage($var, \Zitadel\Resources\User\V3alpha\SchemaTypeFilter::class);
        $this->writeOneof(11, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getFilter()
    {
        return $this->whichOneof("Filter");
    }

}

