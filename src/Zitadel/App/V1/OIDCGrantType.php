<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: zitadel/app.proto

namespace Zitadel\App\V1;

use UnexpectedValueException;

/**
 * Protobuf type <code>zitadel.app.v1.OIDCGrantType</code>
 */
class OIDCGrantType
{
    /**
     * Generated from protobuf enum <code>OIDC_GRANT_TYPE_AUTHORIZATION_CODE = 0;</code>
     */
    const OIDC_GRANT_TYPE_AUTHORIZATION_CODE = 0;
    /**
     * Generated from protobuf enum <code>OIDC_GRANT_TYPE_IMPLICIT = 1;</code>
     */
    const OIDC_GRANT_TYPE_IMPLICIT = 1;
    /**
     * Generated from protobuf enum <code>OIDC_GRANT_TYPE_REFRESH_TOKEN = 2;</code>
     */
    const OIDC_GRANT_TYPE_REFRESH_TOKEN = 2;
    /**
     * Generated from protobuf enum <code>OIDC_GRANT_TYPE_DEVICE_CODE = 3;</code>
     */
    const OIDC_GRANT_TYPE_DEVICE_CODE = 3;
    /**
     * Generated from protobuf enum <code>OIDC_GRANT_TYPE_TOKEN_EXCHANGE = 4;</code>
     */
    const OIDC_GRANT_TYPE_TOKEN_EXCHANGE = 4;

    private static $valueToName = [
        self::OIDC_GRANT_TYPE_AUTHORIZATION_CODE => 'OIDC_GRANT_TYPE_AUTHORIZATION_CODE',
        self::OIDC_GRANT_TYPE_IMPLICIT => 'OIDC_GRANT_TYPE_IMPLICIT',
        self::OIDC_GRANT_TYPE_REFRESH_TOKEN => 'OIDC_GRANT_TYPE_REFRESH_TOKEN',
        self::OIDC_GRANT_TYPE_DEVICE_CODE => 'OIDC_GRANT_TYPE_DEVICE_CODE',
        self::OIDC_GRANT_TYPE_TOKEN_EXCHANGE => 'OIDC_GRANT_TYPE_TOKEN_EXCHANGE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

