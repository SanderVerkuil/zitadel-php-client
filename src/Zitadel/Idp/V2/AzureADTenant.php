<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: zitadel/idp/v2/idp.proto

namespace Zitadel\Idp\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>zitadel.idp.v2.AzureADTenant</code>
 */
class AzureADTenant extends \Google\Protobuf\Internal\Message
{
    protected $type;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $tenant_type
     *     @type string $tenant_id
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Zitadel\Idp\V2\Idp::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.zitadel.idp.v2.AzureADTenantType tenant_type = 1 [json_name = "tenantType"];</code>
     * @return int
     */
    public function getTenantType()
    {
        return $this->readOneof(1);
    }

    public function hasTenantType()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.zitadel.idp.v2.AzureADTenantType tenant_type = 1 [json_name = "tenantType"];</code>
     * @param int $var
     * @return $this
     */
    public function setTenantType($var)
    {
        GPBUtil::checkEnum($var, \Zitadel\Idp\V2\AzureADTenantType::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>string tenant_id = 2 [json_name = "tenantId"];</code>
     * @return string
     */
    public function getTenantId()
    {
        return $this->readOneof(2);
    }

    public function hasTenantId()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>string tenant_id = 2 [json_name = "tenantId"];</code>
     * @param string $var
     * @return $this
     */
    public function setTenantId($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getType()
    {
        return $this->whichOneof("type");
    }

}

