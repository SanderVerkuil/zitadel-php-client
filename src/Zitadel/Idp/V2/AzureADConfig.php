<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: zitadel/idp/v2/idp.proto

namespace Zitadel\Idp\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>zitadel.idp.v2.AzureADConfig</code>
 */
class AzureADConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Client id of the Azure AD application
     *
     * Generated from protobuf field <code>string client_id = 1 [json_name = "clientId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {</code>
     */
    protected $client_id = '';
    /**
     * Defines what user accounts should be able to login (Personal,
     * Organizational, All).
     *
     * Generated from protobuf field <code>.zitadel.idp.v2.AzureADTenant tenant = 2 [json_name = "tenant"];</code>
     */
    protected $tenant = null;
    /**
     * Azure AD doesn't send if the email has been verified. Enable this if the
     * user email should always be added verified in ZITADEL (no verification
     * emails will be sent).
     *
     * Generated from protobuf field <code>bool email_verified = 3 [json_name = "emailVerified"];</code>
     */
    protected $email_verified = false;
    /**
     * The scopes requested by ZITADEL during the request to Azure AD.
     *
     * Generated from protobuf field <code>repeated string scopes = 4 [json_name = "scopes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {</code>
     */
    private $scopes;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $client_id
     *           Client id of the Azure AD application
     *     @type \Zitadel\Idp\V2\AzureADTenant $tenant
     *           Defines what user accounts should be able to login (Personal,
     *           Organizational, All).
     *     @type bool $email_verified
     *           Azure AD doesn't send if the email has been verified. Enable this if the
     *           user email should always be added verified in ZITADEL (no verification
     *           emails will be sent).
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $scopes
     *           The scopes requested by ZITADEL during the request to Azure AD.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Zitadel\Idp\V2\Idp::initOnce();
        parent::__construct($data);
    }

    /**
     * Client id of the Azure AD application
     *
     * Generated from protobuf field <code>string client_id = 1 [json_name = "clientId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {</code>
     * @return string
     */
    public function getClientId()
    {
        return $this->client_id;
    }

    /**
     * Client id of the Azure AD application
     *
     * Generated from protobuf field <code>string client_id = 1 [json_name = "clientId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {</code>
     * @param string $var
     * @return $this
     */
    public function setClientId($var)
    {
        GPBUtil::checkString($var, True);
        $this->client_id = $var;

        return $this;
    }

    /**
     * Defines what user accounts should be able to login (Personal,
     * Organizational, All).
     *
     * Generated from protobuf field <code>.zitadel.idp.v2.AzureADTenant tenant = 2 [json_name = "tenant"];</code>
     * @return \Zitadel\Idp\V2\AzureADTenant|null
     */
    public function getTenant()
    {
        return $this->tenant;
    }

    public function hasTenant()
    {
        return isset($this->tenant);
    }

    public function clearTenant()
    {
        unset($this->tenant);
    }

    /**
     * Defines what user accounts should be able to login (Personal,
     * Organizational, All).
     *
     * Generated from protobuf field <code>.zitadel.idp.v2.AzureADTenant tenant = 2 [json_name = "tenant"];</code>
     * @param \Zitadel\Idp\V2\AzureADTenant $var
     * @return $this
     */
    public function setTenant($var)
    {
        GPBUtil::checkMessage($var, \Zitadel\Idp\V2\AzureADTenant::class);
        $this->tenant = $var;

        return $this;
    }

    /**
     * Azure AD doesn't send if the email has been verified. Enable this if the
     * user email should always be added verified in ZITADEL (no verification
     * emails will be sent).
     *
     * Generated from protobuf field <code>bool email_verified = 3 [json_name = "emailVerified"];</code>
     * @return bool
     */
    public function getEmailVerified()
    {
        return $this->email_verified;
    }

    /**
     * Azure AD doesn't send if the email has been verified. Enable this if the
     * user email should always be added verified in ZITADEL (no verification
     * emails will be sent).
     *
     * Generated from protobuf field <code>bool email_verified = 3 [json_name = "emailVerified"];</code>
     * @param bool $var
     * @return $this
     */
    public function setEmailVerified($var)
    {
        GPBUtil::checkBool($var);
        $this->email_verified = $var;

        return $this;
    }

    /**
     * The scopes requested by ZITADEL during the request to Azure AD.
     *
     * Generated from protobuf field <code>repeated string scopes = 4 [json_name = "scopes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getScopes()
    {
        return $this->scopes;
    }

    /**
     * The scopes requested by ZITADEL during the request to Azure AD.
     *
     * Generated from protobuf field <code>repeated string scopes = 4 [json_name = "scopes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setScopes($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->scopes = $arr;

        return $this;
    }

}

