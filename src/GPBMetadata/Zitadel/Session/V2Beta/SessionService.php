<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: zitadel/session/v2beta/session_service.proto

namespace GPBMetadata\Zitadel\Session\V2Beta;

class SessionService
{
    public static $is_initialized = false;

    public static function initOnce() {
        $pool = \Google\Protobuf\Internal\DescriptorPool::getGeneratedPool();

        if (static::$is_initialized == true) {
          return;
        }
        \GPBMetadata\Zitadel\Object\V2Beta\Object_::initOnce();
        \GPBMetadata\Zitadel\ProtocGenZitadel\V2\Options::initOnce();
        \GPBMetadata\Zitadel\Session\V2Beta\Challenge::initOnce();
        \GPBMetadata\Zitadel\Session\V2Beta\Session::initOnce();
        \GPBMetadata\Google\Api\Annotations::initOnce();
        \GPBMetadata\Google\Api\FieldBehavior::initOnce();
        \GPBMetadata\Google\Protobuf\Struct::initOnce();
        \GPBMetadata\Google\Protobuf\Duration::initOnce();
        
        \GPBMetadata\Validate\Validate::initOnce();
        $pool->internalAddGeneratedFile(
            "\x0A\x83F\x0A,zitadel/session/v2beta/session_service.proto\x12\x16zitadel.session.v2beta\x1A+zitadel/protoc_gen_zitadel/v2/options.proto\x1A&zitadel/session/v2beta/challenge.proto\x1A\$zitadel/session/v2beta/session.proto\x1A\x1Cgoogle/api/annotations.proto\x1A\x1Fgoogle/api/field_behavior.proto\x1A\x1Cgoogle/protobuf/struct.proto\x1A\x1Egoogle/protobuf/duration.proto\x1A.protoc-gen-openapiv2/options/annotations.proto\x1A\x17validate/validate.proto\"\xDD\x01\x0A\x13ListSessionsRequest\x126\x0A\x05query\x18\x01 \x01(\x0B2 .zitadel.object.v2beta.ListQueryR\x05query\x12=\x0A\x07queries\x18\x02 \x03(\x0B2#.zitadel.session.v2beta.SearchQueryR\x07queries\x12O\x0A\x0Esorting_column\x18\x03 \x01(\x0E2(.zitadel.session.v2beta.SessionFieldNameR\x0DsortingColumn\"\x91\x01\x0A\x14ListSessionsResponse\x12<\x0A\x07details\x18\x01 \x01(\x0B2\".zitadel.object.v2beta.ListDetailsR\x07details\x12;\x0A\x08sessions\x18\x02 \x03(\x0B2\x1F.zitadel.session.v2beta.SessionR\x08sessions\"n\x0A\x11GetSessionRequest\x12\x1D\x0A\x0Asession_id\x18\x01 \x01(\x09R\x09sessionId\x12(\x0A\x0Dsession_token\x18\x02 \x01(\x09H\x00R\x0CsessionToken\x88\x01\x01B\x10\x0A\x0E_session_token\"O\x0A\x12GetSessionResponse\x129\x0A\x07session\x18\x01 \x01(\x0B2\x1F.zitadel.session.v2beta.SessionR\x07session\"\xC1\x05\x0A\x14CreateSessionRequest\x12\x97\x01\x0A\x06checks\x18\x01 \x01(\x0B2\x1E.zitadel.session.v2beta.ChecksB_\x92A\\2Z\"Check for user and password. Successful checks will be stated as factors on the session.\"R\x06checks\x12\x90\x01\x0A\x08metadata\x18\x02 \x03(\x0B2:.zitadel.session.v2beta.CreateSessionRequest.MetadataEntryB8\x92A523\"custom key value list to be stored on the session\"R\x08metadata\x12I\x0A\x0Achallenges\x18\x03 \x01(\x0B2).zitadel.session.v2beta.RequestChallengesR\x0Achallenges\x12@\x0A\x0Auser_agent\x18\x04 \x01(\x0B2!.zitadel.session.v2beta.UserAgentR\x09userAgent\x12\xA4\x01\x0A\x08lifetime\x18\x05 \x01(\x0B2\x19.google.protobuf.DurationBh\x92A]2Q\"duration (in seconds) after which the session will be automatically invalidated\"J\x08\"18000s\"\xFAB\x05\xAA\x01\x02*\x00H\x00R\x08lifetime\x88\x01\x01\x1A;\x0A\x0DMetadataEntry\x12\x10\x0A\x03key\x18\x01 \x01(\x09R\x03key\x12\x14\x0A\x05value\x18\x02 \x01(\x0CR\x05value:\x028\x01B\x0B\x0A\x09_lifetime\"\x89\x03\x0A\x15CreateSessionResponse\x128\x0A\x07details\x18\x01 \x01(\x0B2\x1E.zitadel.object.v2beta.DetailsR\x07details\x12M\x0A\x0Asession_id\x18\x02 \x01(\x09B.\x92A+2\x13\"id of the session\"J\x14\"222430354126975533\"R\x09sessionId\x12\xA2\x01\x0A\x0Dsession_token\x18\x03 \x01(\x09B}\x92Az2x\"The current token of the session, which is required for delete session, get session or the request of other resources.\"R\x0CsessionToken\x12B\x0A\x0Achallenges\x18\x04 \x01(\x0B2\".zitadel.session.v2beta.ChallengesR\x0Achallenges\"\xC2\x06\x0A\x11SetSessionRequest\x12g\x0A\x0Asession_id\x18\x01 \x01(\x09BH\x92A;2\x1D\"id of the session to update\"J\x14\"222430354126975533\"x\xC8\x01\x80\x01\x01\xFAB\x07r\x05\x10\x01\x18\xC8\x01R\x09sessionId\x12^\x0A\x0Dsession_token\x18\x02 \x01(\x09B9\x92A,2\$\"DEPRECATED: this field is ignored.\"x\xC8\x01\x80\x01\x01\xFAB\x07r\x05\x10\x00\x18\xC8\x01R\x0CsessionToken\x12\x97\x01\x0A\x06checks\x18\x03 \x01(\x0B2\x1E.zitadel.session.v2beta.ChecksB_\x92A\\2Z\"Check for user and password. Successful checks will be stated as factors on the session.\"R\x06checks\x12\x8D\x01\x0A\x08metadata\x18\x04 \x03(\x0B27.zitadel.session.v2beta.SetSessionRequest.MetadataEntryB8\x92A523\"custom key value list to be stored on the session\"R\x08metadata\x12I\x0A\x0Achallenges\x18\x05 \x01(\x0B2).zitadel.session.v2beta.RequestChallengesR\x0Achallenges\x12\xA4\x01\x0A\x08lifetime\x18\x06 \x01(\x0B2\x19.google.protobuf.DurationBh\x92A]2Q\"duration (in seconds) after which the session will be automatically invalidated\"J\x08\"18000s\"\xFAB\x05\xAA\x01\x02*\x00H\x00R\x08lifetime\x88\x01\x01\x1A;\x0A\x0DMetadataEntry\x12\x10\x0A\x03key\x18\x01 \x01(\x09R\x03key\x12\x14\x0A\x05value\x18\x02 \x01(\x0CR\x05value:\x028\x01B\x0B\x0A\x09_lifetime\"\xB7\x02\x0A\x12SetSessionResponse\x128\x0A\x07details\x18\x01 \x01(\x0B2\x1E.zitadel.object.v2beta.DetailsR\x07details\x12\xA2\x01\x0A\x0Dsession_token\x18\x02 \x01(\x09B}\x92Az2x\"The current token of the session, which is required for delete session, get session or the request of other resources.\"R\x0CsessionToken\x12B\x0A\x0Achallenges\x18\x03 \x01(\x0B2\".zitadel.session.v2beta.ChallengesR\x0Achallenges\"\x9E\x03\x0A\x14DeleteSessionRequest\x12j\x0A\x0Asession_id\x18\x01 \x01(\x09BK\x92A>2 \"id of the session to terminate\"J\x14\"222430354126975533\"x\xC8\x01\x80\x01\x01\xFAB\x07r\x05\x10\x01\x18\xC8\x01R\x09sessionId\x12\x87\x02\x0A\x0Dsession_token\x18\x02 \x01(\x09B\xDC\x01\x92A\xD8\x012\xD5\x01\"The current token of the session, previously returned on the create / update request. The token is required unless the authenticated user terminates the own session or is granted the `session.delete` permission.\"H\x00R\x0CsessionToken\x88\x01\x01B\x10\x0A\x0E_session_token\"Q\x0A\x15DeleteSessionResponse\x128\x0A\x07details\x18\x01 \x01(\x0B2\x1E.zitadel.object.v2beta.DetailsR\x07details\"\xC8\x0C\x0A\x06Checks\x12u\x0A\x04user\x18\x01 \x01(\x0B2!.zitadel.session.v2beta.CheckUserB9\x92A624\"checks the user and updates the session on success\"H\x00R\x04user\x88\x01\x01\x12\xE0\x01\x0A\x08password\x18\x02 \x01(\x0B2%.zitadel.session.v2beta.CheckPasswordB\x97\x01\x92A\x93\x012\x90\x01\"Checks the password and updates the session on success. Requires that the user is already checked, either in the previous or the same request.\"H\x01R\x08password\x88\x01\x01\x12\x80\x02\x0A\x0Aweb_auth_n\x18\x03 \x01(\x0B2%.zitadel.session.v2beta.CheckWebAuthNB\xB5\x01\x92A\xB1\x012\xAE\x01\"Checks the public key credential issued by the WebAuthN client. Requires that the user is already checked and a WebAuthN challenge to be requested, in any previous request.\"H\x02R\x08webAuthN\x88\x01\x01\x12\xB4\x01\x0A\x0Aidp_intent\x18\x04 \x01(\x0B2&.zitadel.session.v2beta.CheckIDPIntentBh\x92Ae2c\"Checks the IDP intent. Requires that the userlink is already checked and a successful idp intent.\"H\x03R\x09idpIntent\x88\x01\x01\x12\xE8\x01\x0A\x04totp\x18\x05 \x01(\x0B2!.zitadel.session.v2beta.CheckTOTPB\xAB\x01\x92A\xA7\x012\xA4\x01\"Checks the Time-based One-Time Password and updates the session on success. Requires that the user is already checked, either in the previous or the same request.\"H\x04R\x04totp\x88\x01\x01\x12\xEF\x01\x0A\x07otp_sms\x18\x06 \x01(\x0B2 .zitadel.session.v2beta.CheckOTPB\xAE\x01\x92A\xAA\x012\xA7\x01\"Checks the One-Time Password sent over SMS and updates the session on success. Requires that the user is already checked, either in the previous or the same request.\"H\x05R\x06otpSms\x88\x01\x01\x12\xF5\x01\x0A\x09otp_email\x18\x07 \x01(\x0B2 .zitadel.session.v2beta.CheckOTPB\xB0\x01\x92A\xAC\x012\xA9\x01\"Checks the One-Time Password sent over Email and updates the session on success. Requires that the user is already checked, either in the previous or the same request.\"H\x06R\x08otpEmail\x88\x01\x01B\x07\x0A\x05_userB\x0B\x0A\x09_passwordB\x0D\x0A\x0B_web_auth_nB\x0D\x0A\x0B_idp_intentB\x07\x0A\x05_totpB\x0A\x0A\x08_otp_smsB\x0C\x0A\x0A_otp_email\"\xB5\x01\x0A\x09CheckUser\x12V\x0A\x07user_id\x18\x01 \x01(\x09B;\x92A.J&\"d654e6ba-70a3-48ef-a95d-37c8d8a7901a\"x\xC8\x01\x80\x01\x01\xFAB\x07r\x05\x10\x01\x18\xC8\x01H\x00R\x06userId\x12F\x0A\x0Alogin_name\x18\x02 \x01(\x09B%\x92A\x18J\x10\"mini@mouse.com\"x\xC8\x01\x80\x01\x01\xFAB\x07r\x05\x10\x01\x18\xC8\x01H\x00R\x09loginNameB\x08\x0A\x06search\"O\x0A\x0DCheckPassword\x12>\x0A\x08password\x18\x01 \x01(\x09B\"\x92A\x15J\x0D\"V3ryS3cure!\"x\xC8\x01\x80\x01\x01\xFAB\x07r\x05\x10\x01\x18\xC8\x01R\x08password\"\xC9\x01\x0A\x0DCheckWebAuthN\x12\xB7\x01\x0A\x19credential_assertion_data\x18\x01 \x01(\x0B2\x17.google.protobuf.StructBb\x92AS2JJSON representation of public key credential issued by the webAuthN clientx\x80\x80@\x80\x017\xE2A\x01\x02\xFAB\x05\x8A\x01\x02\x10\x01R\x17credentialAssertionData\"\x8D\x03\x0A\x0ECheckIDPIntent\x12\xB8\x01\x0A\x0Didp_intent_id\x18\x01 \x01(\x09B\x93\x01\x92A\x85\x012UID of the idp intent, previously returned on the success response of the IDP callbackJ&\"d654e6ba-70a3-48ef-a95d-37c8d8a7901a\"x\xC8\x01\x80\x01\x01\xFAB\x07r\x05\x10\x01\x18\xC8\x01R\x0BidpIntentId\x12\xBF\x01\x0A\x10idp_intent_token\x18\x02 \x01(\x09B\x94\x01\x92A\x86\x012Xtoken of the idp intent, previously returned on the success response of the IDP callbackJ\$\"SJKL3ioIDpo342ioqw98fjp3sdf32wahb=\"x\xC8\x01\x80\x01\x01\xFAB\x07r\x05\x10\x01\x18\xC8\x01R\x0EidpIntentToken\"<\x0A\x09CheckTOTP\x12/\x0A\x04code\x18\x01 \x01(\x09B\x1B\x92A\x0FJ\x08\"323764\"x\x06\x80\x01\x06\xFAB\x06r\x04\x10\x06\x18\x06R\x04code\"8\x0A\x08CheckOTP\x12,\x0A\x04code\x18\x01 \x01(\x09B\x18\x92A\x0EJ\x09\"3237642\"\x80\x01\x01\xFAB\x04r\x02\x10\x01R\x04code2\x96\x0B\x0A\x0ESessionService\x12\x93\x02\x0A\x0CListSessions\x12+.zitadel.session.v2beta.ListSessionsRequest\x1A,.zitadel.session.v2beta.ListSessionsResponse\"\xA7\x01\x92Am\x12\x0FSearch sessions\x1A\x13Search for sessionsJ\x0B\x0A\x03200\x12\x04\x0A\x02OKJ8\x0A\x03400\x121\x0A\x12invalid list query\x12\x1B\x0A\x19\x1A\x17#/definitions/rpcStatus\x8A\xB5\x18\x11\x0A\x0F\x0A\x0Dauthenticated\x82\xD3\xE4\x93\x02\x1C\"\x17/v2beta/sessions/search:\x01*\x12\x99\x02\x0A\x0AGetSession\x12).zitadel.session.v2beta.GetSessionRequest\x1A*.zitadel.session.v2beta.GetSessionResponse\"\xB3\x01\x92Av\x12\x0DGet a session\x1AXGet a session and all its information like the time of the user or password verificationJ\x0B\x0A\x03200\x12\x04\x0A\x02OK\x8A\xB5\x18\x11\x0A\x0F\x0A\x0Dauthenticated\x82\xD3\xE4\x93\x02\x1F\x12\x1D/v2beta/sessions/{session_id}\x12\xB2\x02\x0A\x0DCreateSession\x12,.zitadel.session.v2beta.CreateSessionRequest\x1A-.zitadel.session.v2beta.CreateSessionResponse\"\xC3\x01\x92A\x8A\x01\x12\x14Create a new session\x1AeCreate a new session. A token will be returned, which is required for further updates of the session.J\x0B\x0A\x03200\x12\x04\x0A\x02OK\x8A\xB5\x18\x16\x0A\x0F\x0A\x0Dauthenticated\x12\x03\x08\xC9\x01\x82\xD3\xE4\x93\x02\x15\"\x10/v2beta/sessions:\x01*\x12\x81\x02\x0A\x0ASetSession\x12).zitadel.session.v2beta.SetSessionRequest\x1A*.zitadel.session.v2beta.SetSessionResponse\"\x9B\x01\x92A[\x12\x1AUpdate an existing session\x1A0Update an existing session with new information.J\x0B\x0A\x03200\x12\x04\x0A\x02OK\x8A\xB5\x18\x11\x0A\x0F\x0A\x0Dauthenticated\x82\xD3\xE4\x93\x02\"2\x1D/v2beta/sessions/{session_id}:\x01*\x12\x98\x02\x0A\x0DDeleteSession\x12,.zitadel.session.v2beta.DeleteSessionRequest\x1A-.zitadel.session.v2beta.DeleteSessionResponse\"\xA9\x01\x92Ai\x12\x1DTerminate an existing session\x1A;Terminate your own session or if granted any other session.J\x0B\x0A\x03200\x12\x04\x0A\x02OK\x8A\xB5\x18\x11\x0A\x0F\x0A\x0Dauthenticated\x82\xD3\xE4\x93\x02\"*\x1D/v2beta/sessions/{session_id}:\x01*B\xB8\x09Z:github.com/zitadel/zitadel/pkg/grpc/session/v2beta;session\x92A\xF8\x08\x12\xD6\x03\x0A\x0FSession Service\x12\xC4\x02This API is intended to manage sessions in a ZITADEL instance. Follow the guides on how to [build your own Login UI](/docs/guides/integrate/login-ui) and learn how to use the Session API. This project is in beta state. It can AND will continue breaking until the services provide the same functionality as the current login.\".\x0A\x07ZITADEL\x12\x13https://zitadel.com\x1A\x0Ehi@zitadel.com*B\x0A\x0AApache 2.0\x124https://github.com/zitadel/zitadel/blob/main/LICENSE2\x082.0-beta\x1A\x0E\$CUSTOM-DOMAIN\"\x01/*\x02\x02\x012\x10application/json2\x10application/grpc2\x1Aapplication/grpc-web+proto:\x10application/json:\x10application/grpc:\x1Aapplication/grpc-web+protoRm\x0A\x03403\x12f\x0AGReturned when the user does not have permission to access the resource.\x12\x1B\x0A\x19\x1A\x17#/definitions/rpcStatusRP\x0A\x03404\x12I\x0A*Returned when the resource does not exist.\x12\x1B\x0A\x19\x1A\x17#/definitions/rpcStatusZ\xC2\x01\x0A\xBF\x01\x0A\x06OAuth2\x12\xB4\x01\x08\x03(\x042!\$CUSTOM-DOMAIN/oauth/v2/authorize:\x1D\$CUSTOM-DOMAIN/oauth/v2/tokenBl\x0A\x10\x0A\x06openid\x12\x06openid\x0AX\x0A*urn:zitadel:iam:org:project:id:zitadel:aud\x12*urn:zitadel:iam:org:project:id:zitadel:audb@\x0A>\x0A\x06OAuth2\x124\x0A\x06openid\x0A*urn:zitadel:iam:org:project:id:zitadel:audr>\x0A\"Detailed information about ZITADEL\x12\x18https://zitadel.com/docsb\x06proto3"
        , true);

        static::$is_initialized = true;
    }
}

